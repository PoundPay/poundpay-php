Poundpay
=====
Poundpay is a payments platform for marketplaces


Requirements
------------
* PHP 5.3 or greater
* PHP curl extension
* HTTP_Request.
  * Install via pear:
  
            pear install HTTP_Request2

  * Or download:

        http://pear.php.net/package/HTTP_Request2/download


Installation
------------

    $ pear channel-discover pearhub.org
    $ pear install pearhub/poundpay

To use the library, just include `PoundPay/Autoload.php`.


Configuration
-------------
The first step in using the library is calling `PoundPay\Core::configure()`. Example:

    $account_sid = 'DVxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx';
    $auth_token = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
    $api_uri = 'https://api-sandbox.poundpay.com';
    $version = 'silver';

    PoundPay\Core::configure($account_sid, $auth_token, $api_uri, $version);


Creating a Payment
------------------
Instantiate a new PoundPay\Payment object with parameters as in this example:

    $payment = new PoundPay\Payment(array(
      'amount' => 20000, // in USD cents
      'payer_fee_amount' => 0,
      'recipient_fee_amount' => 500,
      'payer_email_address' => 'fred@example.com',
      'recipient_email_address' => 'immanuel@example.com',
      'description' => 'Beats by Dr. Dre (White)',
    ));

Then, post the payment to the server:

    $payment->save();

The $payment object will now contain an `sid` property containing the id returned by the server.


Serving the payment IFRAME
--------------------------

    <script src="https://www.poundpay.com/js/poundpay.js"></script>

    <div id="pound-root"></div>

    <script>
      function handlePaymentSuccess() {
        // do something
      }

      function handlePaymentError() {
        // handle error
      }

      PoundPay.init({
        payment_sid: "<?= $payment1->sid ?>",
        success: handlePaymentSuccess,
        error: handlePaymentError,
        first_name: "Fred", // Optional
        last_name: "Nietzsche", // Optional
        server: "https://www-sandbox.poundpay.com"  // Exclude for production
      });
    </script>


Creating a Charge Permission
----------------------------
Instantiate a new PoundPay\Payment object with parameters as in this example:

    $charge_permission = new PoundPay\ChargePermission(array(
      'email_address' => 'fred@example.com'));

Then, post the charge permission to the server:

    $charge_permission->save();

The $charge_permission object will now contain an `sid` property containing the
id of the created charge permission returned by the server.


Deactivating a Charge Permission
--------------------------------

    $charge_permission = PoundPay\ChargePermission.find(charge_permission_sid);
    $charge_permission->state = 'inactive';
    $charge_permission.save();


Batching
--------

In some cases you may wish to batch authorize and escrow a collection of
payments. By doing so there will be only *one* payer charge for that collection
of payments. Note that if you do batch authorize a collection of payments that
it must *also* be batch escrowed.

Batching is designed for shopping carts where you want a collection of payments
to appear to appear as a single charge.

In order to use batching you simply need to pass `sids` for *all* payments in
the collection you want to batch to the IFrame:

  <script src="https://www.poundpay.com/js/poundpay.js"></script>

    <div id="pound-root"></div>

    <script>
      function handlePaymentSuccess() {
        // do something
      }

      function handlePaymentError() {
        // handle error
      }

      PoundPay.init({
        payment_sid: [
            "<?= $payment1->sid ?>",
            "<?= $payment2->sid ?>",
            "<?= $payment3->sid ?>"
            ],
        success: handlePaymentSuccess,
        error: handlePaymentError,
        first_name: "Fred", // Optional
        last_name: "Nietzsche", // Optional
        address_street: "990 Guerrero St", // Optional
        address_city: "San Francisco", // Optional
        address_state: "California", // Optional
        address_zip: "94110", // Optional
        server: "https://www-sandbox.poundpay.com"  // Exclude for production
      });
    </script>

Alternatively if you are directly authorizing the payments using a charge
permission:

    PoundPay\Payment::batch_update(
        array($payment1->sid, $payment2->sid, $payment3->sid),
        array('state' => 'authorized'));

Finally you'll need to batch escrow the payments:

    PoundPay\Payment::batch_update(
        array($payment1->sid, $payment2->sid, $payment3->sid),
        array('state' => 'escrowed'));

Notice that if you did the following instead an error would be triggered since
batched payments *must* be authorized and escrowed collectively:

    $payment1->state = 'escrowed';
    $payment1.save(); // fails

However if you cancel some of the payments prior to batch escrow you should
exclude them from the batch call:

    $payment1->state = 'canceled';
    $payment1.save(); // ok

    PoundPay\Payment::batch_update(
        array($payment2->sid, $payment3->sid),
        array('state' => 'escrowed'));


Unit Tests
----------
From the `tests` directory, run:

    phpunit .


Example Marketplace
-------------------
Assuming you've git cloned poundpay-php to `/home/me/code/poundpay-php`:
 
    $ sudo cp /home/me/code/poundpay-php/examples/marketplace/simplemp.conf /etc/nginx/conf.d/
    $ sudo sed -i 's/{path-to-poundpay-php}/\/home\/me\/code\/poundpay-php/g' /etc/nginx/conf.d/simplemp.conf
    $ sudo service nginx reload
    $ php5-cgi -b 127.0.0.1:9000
